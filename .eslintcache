[{"/home/danielrb/consultoria/guamapa/src/index.js":"1","/home/danielrb/consultoria/guamapa/src/app.js":"2","/home/danielrb/consultoria/guamapa/src/reportWebVitals.js":"3","/home/danielrb/consultoria/guamapa/src/authenticated-app.js":"4","/home/danielrb/consultoria/guamapa/src/unauthenticated-app.js":"5","/home/danielrb/consultoria/guamapa/src/axiosConfig.js":"6","/home/danielrb/consultoria/guamapa/src/components/main.js":"7","/home/danielrb/consultoria/guamapa/src/components/map.js":"8","/home/danielrb/consultoria/guamapa/src/context/fetch-context.js":"9","/home/danielrb/consultoria/guamapa/src/context/auth-context.js":"10","/home/danielrb/consultoria/guamapa/src/app-shell.js":"11","/home/danielrb/consultoria/guamapa/src/pages/login.js":"12","/home/danielrb/consultoria/guamapa/src/pages/add-town.js":"13"},{"size":500,"mtime":1610328320233,"results":"14","hashOfConfig":"15"},{"size":2395,"mtime":1612319768507,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1610154606127,"results":"17","hashOfConfig":"15"},{"size":286,"mtime":1611885993541,"results":"18","hashOfConfig":"15"},{"size":267,"mtime":1611888855308,"results":"19","hashOfConfig":"15"},{"size":346,"mtime":1612152910914,"results":"20","hashOfConfig":"15"},{"size":4154,"mtime":1611888133704,"results":"21","hashOfConfig":"15"},{"size":2087,"mtime":1612234033937,"results":"22","hashOfConfig":"15"},{"size":2193,"mtime":1612324058936,"results":"23","hashOfConfig":"15"},{"size":1887,"mtime":1612238239587,"results":"24","hashOfConfig":"15"},{"size":4742,"mtime":1612237722094,"results":"25","hashOfConfig":"15"},{"size":3270,"mtime":1612318800700,"results":"26","hashOfConfig":"15"},{"size":3971,"mtime":1612322827453,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1u4p9um",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"/home/danielrb/consultoria/guamapa/src/index.js",[],["61","62"],"/home/danielrb/consultoria/guamapa/src/app.js",["63","64"],"import './app.css';\nimport React, { lazy, Suspense, useContext } from 'react'\nimport { \n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\n// } from 'react-dom-router';\n\nimport { AuthProvider, AuthContext } from './context/auth-context';\nimport { FetchProvider } from './context/fetch-context';\nimport Login from './pages/login';\nimport AppShell from './app-shell';\nimport Map from './components/map';\nimport AddTown from './pages/add-town';\n\n// import {useUser} from './context/auth'\n// import axios from './axiosConfig'\n// import AuthenticatedApp from './authenticated-app'\n// import UnauthenticatedApp from './unauthenticated-app'\n\n// const AuthenticatedApp = React.lazy(() => import('./authenticated-app'))\n// const UnauthenticatedApp = React.lazy(() => import('./unauthenticated-app'))\n\nconst LoadingFallback = () => (\n  <AppShell>\n    <div>\n      Loading...\n    </div>\n  </AppShell>\n)\n\nconst UnauthenticatedRoutes = () => (\n  // TODO: 404\n  <Switch>\n    <Route path=\"/login\">\n      <Login />\n    </Route>\n    <Route path=\"/\">\n      <AppShell>\n        <Map />\n      </AppShell>\n    </Route>\n  </Switch>\n)\n\nconst AuthenticatedRoute = ({ children, ...rest }) => {\n  const auth = useContext(AuthContext);\n  return (\n    <Route\n      {...rest}\n      render={() => \n        auth.isAuthenticated() ? (\n          <AppShell>{children}</AppShell>\n        ) : (\n          <Redirect to=\"/\" />\n        )\n      }\n      ></Route>\n  );\n};\n\nconst StaffRoute = ({ children, ...rest }) => {\n  const auth = useContext(AuthContext);\n  return (\n    <Route\n      {...rest}\n      render={() => \n        auth.isAuthenticated() && auth.isStaff() ? (\n          <AppShell>{children}</AppShell>\n        ) : (\n          <Redirect to=\"/\" />\n        )\n      }\n      ></Route>\n  );\n};\n\nconst AppRoutes = () => {\n  return (\n    <>\n      <Suspense fallback={<LoadingFallback />}>\n        <Switch>\n          <StaffRoute path=\"/agregar\">\n              <AddTown />\n          </StaffRoute>\n          <UnauthenticatedRoutes />\n        </Switch>\n      </Suspense>\n    </>\n  );\n}\n\nfunction App() {\n  // const user = useUser()\n//   const user = true;\n//   return user ? <AuthenticatedApp /> : <UnauthenticatedApp />\n  return (\n    <Router>\n      <AuthProvider>\n        <FetchProvider>\n          <AppRoutes />\n        </FetchProvider>\n      </AuthProvider>\n\n    </Router>\n  )\n\n}\nexport default App;\n\n","/home/danielrb/consultoria/guamapa/src/reportWebVitals.js",[],"/home/danielrb/consultoria/guamapa/src/authenticated-app.js",[],["65","66"],"/home/danielrb/consultoria/guamapa/src/unauthenticated-app.js",[],"/home/danielrb/consultoria/guamapa/src/axiosConfig.js",[],"/home/danielrb/consultoria/guamapa/src/components/main.js",[],"/home/danielrb/consultoria/guamapa/src/components/map.js",["67","68","69","70"],"\nimport { \n  MapContainer, \n  TileLayer, \n  Marker, \n  Popup,\n  GeoJSON } from 'react-leaflet';\n\nimport axios from '../axiosConfig'\nimport { useEffect, useState, useContext } from 'react';\nimport { FetchContext } from '../context/fetch-context';\n\nconst Map = () => {\n  const center = [14.5534, -90.7353];\n  const [towns, setTowns] = useState([]);\n  const fetchContext = useContext(FetchContext);\n\n  const onEachFeature = (feature, layer) => {\n    // const popup = <Popup />\n    if (feature.properties.poblacion) {\n      const poblacion = feature.properties.poblacion;\n      layer.bindPopup(` <h5>poblacion: ${poblacion}</h5> `);\n    }\n  }\n\n  useEffect(() => {\n    const getTowns = async () => {\n      try {\n        console.log('getting towns')\n        // const { data } = await fetchContext.authAxios.get('api/v1/towns/');\n        const { data } = await axios.get('api/v1/towns/');\n        setTowns(data);\n        console.log(towns)\n        towns.map(town => {\n          console.log(town.location.coordinates)\n          return town;\n        })\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    getTowns();\n  }, [])\n\n  return (\n    <MapContainer\n      center={center}\n      zoom={13}\n      scrollWheelZoom={false}\n      style={{ height: \"400px\" }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {/* <GeoJSON data={geojsonData} onEachFeature={onEachFeature} /> */}\n      {towns.map((town) => (\n        <Marker\n          key={town.id}\n          position={{\n            lat: town.location.coordinates[1],\n            lng: town.location.coordinates[0],\n          }}\n        >\n          <Popup>\n            {/* TODO: style this */}\n            <ul>\n              <li>{town.category} - {town.name}</li>\n              <li>Población: {town.population}</li>\n              <li>Elevación: {town.elevation }</li>\n            </ul>\n          </Popup>\n        </Marker>\n      ))}\n    </MapContainer>\n  );\n}\n\nexport default Map;","/home/danielrb/consultoria/guamapa/src/context/fetch-context.js",[],"/home/danielrb/consultoria/guamapa/src/context/auth-context.js",["71"],"import React, { createContext, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AuthContext = createContext();\nconst { Provider } = AuthContext;\n\nconst AuthProvider = ({ children }) => {\n  const history = useHistory();\n\n  const accessToken = localStorage.getItem(\"accessToken\");\n  const refreshToken = localStorage.getItem(\"refreshToken\");\n  const user = localStorage.getItem(\"user\");\n  console.log('from local')\n  console.log({refreshToken, accessToken, user})\n\n  const [authState, setAuthState] = useState({\n    accessToken,\n    refreshToken,\n    user: user ? JSON.parse(user) : {},\n  });\n\n  const setAuthInfo = ({ accessToken, user, refreshToken }) => {\n    localStorage.setItem(\"accessToken\", accessToken);\n    localStorage.setItem(\"refreshToken\", refreshToken);\n    localStorage.setItem(\"user\", JSON.stringify(user));\n\n    setAuthState({\n      accessToken,\n      refreshToken,\n      user,\n    });\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    localStorage.removeItem(\"user\");\n    setAuthState({});\n    // history.push(\"/login\");\n    history.push(\"/\");\n  };\n\n  const isAuthenticated = () => {\n    // TODO: check expiration in token\n    console.log(' is it auth?')\n    if (!authState.accessToken) {\n      return false;\n    }\n    console.log('yup');\n    return (\n      // TODO actually check\n      true\n      // new Date().getTime() / 1000 < authState.expiresAt\n    );\n  };\n\n  const isStaff = () => {\n    console.log('Use is ', authState.user.is_staff)\n    return authState.user.is_staff;\n  };\n\n  return (\n    <Provider\n      value={{\n        authState,\n        setAuthState: (authInfo) => setAuthInfo(authInfo),\n        logout,\n        isAuthenticated,\n        isStaff,\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nexport { AuthContext, AuthProvider };\n","/home/danielrb/consultoria/guamapa/src/app-shell.js",[],"/home/danielrb/consultoria/guamapa/src/pages/login.js",["72"],"import React, { useContext, useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport { AuthContext } from '../context/auth-context';\nimport axios from '../axiosConfig';\nimport { Redirect } from 'react-router-dom';\n\nconst loginSchema = yup.object({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(4, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nconst Login = () => {\n  const authContext = useContext(AuthContext);\n  const [loginSuccess, setLoginSuccess] = useState();\n  const [loginError, setLoginError] = useState();\n  const [redirectOnLogin, setRedirectOnLogin] = useState(false);\n  const [loginLoading, setLoginLoading] = useState(false);\n\n  // TODO: translate all to spanish\n  const submitCredentials = async credentials => {\n    try {\n      setLoginLoading(true);\n      const { data } = await axios.post(\n        `api-auth/login/`, credentials\n      );\n      authContext.setAuthState({\n        accessToken: data.access_token,\n        refreshToken: data.refresh_token,\n        user: data.user,\n      });\n      setLoginSuccess('Login Successful')\n      setLoginError(null)\n\n      setTimeout(() => setRedirectOnLogin(true), 600);\n\n    } catch (error) {\n      console.error(error);\n      setLoginLoading(false);\n      const { data } = error.response;\n      //TODO: tranlsate or something\n      setLoginError(data.non_field_errors);\n      setLoginSuccess(false);\n    }\n  }\n\n  const formik = useFormik({\n    // TODO: remove intial values\n    initialValues: {\n      email: \"daniel@danielrb.dev\",\n      password: \"popo\",\n    },\n    validationSchema: loginSchema,\n    onSubmit: (values) => {\n      submitCredentials(values)\n    },\n  });\n\n  return (\n    <>\n    {redirectOnLogin && <Redirect to=\"/\" />}\n    <Container maxWidth=\"sm\">\n      <div>\n        <form onSubmit={formik.handleSubmit}>\n          {loginSuccess && (<p>{loginSuccess}</p>)}\n          {loginError && (<p>{loginError}</p>)}\n          <TextField\n            fullWidth\n            id=\"email\"\n            name=\"email\"\n            label=\"Email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            error={formik.touched.email && Boolean(formik.errors.email)}\n            helperText={formik.touched.email && formik.errors.email}\n          />\n          <TextField\n            fullWidth\n            id=\"password\"\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            value={formik.values.password}\n            onChange={formik.handleChange}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            helperText={formik.touched.password && formik.errors.password}\n          />\n          <Button \n            color=\"primary\" \n            variant=\"contained\" \n            fullWidth \n            type=\"submit\">\n            Login\n          </Button>\n        </form>\n      </div>\n    </Container>\n    </>\n  );\n};\n\n\nexport default Login","/home/danielrb/consultoria/guamapa/src/pages/add-town.js",["73"],"import React, {useContext} from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport  CardActions  from '@material-ui/core/CardActions'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\n\nimport { FetchContext } from '../context/fetch-context';\n\n\nconst AddTown = () => {\n\n  const townSchema = yup.object({\n    name: yup\n      .string('Nombre de la comunidad')\n      .required(),\n    category: yup\n      .string()\n      .required(),\n    lng: yup\n      .number()\n      .required(),\n    lat: yup\n      .number()\n      .required(),\n    elevation: yup\n      .number()\n      .integer()\n      .required(),\n    population: yup\n      .number()\n      .integer()\n      .required(),\n\n  })\n\n  const fetchContext = useContext(FetchContext);\n  const onAddTown = async (townValues) => {\n    console.log('submitting')\n    console.log(townValues);\n    try {\n      townValues.location = {\n        type: 'Point',\n        coordinates: [townValues.lng, townValues.lat]\n      }\n      const { data } = await fetchContext.authAxios.post('api/v1/towns/', \n      townValues)\n      console.log('fetched')\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      //TODO: remove initial values\n      name: 'el estor',\n      category: 'pueblo',\n      lng: -90.71479797363281,\n      lat: 14.551517901362407,\n      population: 5000,\n      elevation: 400,\n      // name: '',\n      // category: '',\n      // lng: '', \n      // lat: '',\n      // population: '',\n      // elevation: '', \n    },\n    validationSchema: townSchema,\n    onSubmit: (values) => onAddTown(values)\n  })\n\n  return (\n\n    <Card>\n      <form onSubmit={formik.handleSubmit}>\n      <CardContent>\n        <TextField\n          fullWidth\n          id=\"name\"\n          name=\"name\"\n          label=\"Nombre\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n        />\n        <TextField\n          fullWidth\n          id=\"category\"\n          name=\"category\"\n          label=\"Categoria\"\n          value={formik.values.category}\n          onChange={formik.handleChange}\n          error={formik.touched.category && Boolean(formik.errors.category)}\n        />\n        <TextField\n          fullWidth\n          id=\"lng\"\n          name=\"lng\"\n          label=\"Longitud\"\n          type=\"number\"\n          value={formik.values.lng}\n          onChange={formik.handleChange}\n          error={formik.touched.lng && Boolean(formik.errors.lng)}\n        />\n        <TextField\n          fullWidth\n          id=\"lat\"\n          name=\"lat\"\n          label=\"Latitud\"\n          type=\"number\"\n          value={formik.values.lat}\n          onChange={formik.handleChange}\n          error={formik.touched.lat && Boolean(formik.errors.lat)}\n        />\n        <TextField\n          fullWidth\n          id=\"population\"\n          name=\"population\"\n          label=\"Población\"\n          type=\"number\"\n          value={formik.values.population}\n          onChange={formik.handleChange}\n          error={formik.touched.population && Boolean(formik.errors.population)}\n        />\n        <TextField\n          fullWidth\n          id=\"elevation\"\n          name=\"elevation\"\n          label=\"Elevación\"\n          type=\"number\"\n          value={formik.values.elevation}\n          onChange={formik.handleChange}\n          error={formik.touched.elevation && Boolean(formik.errors.elevation)}\n        />\n      </CardContent>\n      <CardActions>\n        <Button \n          type=\"submit\" \n          variant=\"contained\" \n          color=\"primary\" \n          >\n          Agregar\n        </Button>\n\n      </CardActions>\n      </form>\n    </Card>\n  )\n}\n\nexport default AddTown;\n\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":2,"column":17,"nodeType":"80","messageId":"81","endLine":2,"endColumn":21},{"ruleId":"78","severity":1,"message":"82","line":48,"column":7,"nodeType":"80","messageId":"81","endLine":48,"endColumn":25},{"ruleId":"74","replacedBy":"83"},{"ruleId":"76","replacedBy":"84"},{"ruleId":"78","severity":1,"message":"85","line":7,"column":3,"nodeType":"80","messageId":"81","endLine":7,"endColumn":10},{"ruleId":"78","severity":1,"message":"86","line":16,"column":9,"nodeType":"80","messageId":"81","endLine":16,"endColumn":21},{"ruleId":"78","severity":1,"message":"87","line":18,"column":9,"nodeType":"80","messageId":"81","endLine":18,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":43,"column":6,"nodeType":"90","endLine":43,"endColumn":8,"suggestions":"91"},{"ruleId":"78","severity":1,"message":"92","line":1,"column":42,"nodeType":"80","messageId":"81","endLine":1,"endColumn":51},{"ruleId":"78","severity":1,"message":"93","line":27,"column":10,"nodeType":"80","messageId":"81","endLine":27,"endColumn":22},{"ruleId":"78","severity":1,"message":"94","line":9,"column":8,"nodeType":"80","messageId":"81","endLine":9,"endColumn":17},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","'AuthenticatedRoute' is assigned a value but never used.",["95"],["96"],"'GeoJSON' is defined but never used.","'fetchContext' is assigned a value but never used.","'onEachFeature' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'towns'. Either include it or remove the dependency array.","ArrayExpression",["97"],"'useEffect' is defined but never used.","'loginLoading' is assigned a value but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [towns]",{"range":"100","text":"101"},[1133,1135],"[towns]"]